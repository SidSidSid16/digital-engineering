\begin{Verbatim}[commandchars=\\\{\}]
\PYG{k}{library}\PYG{+w}{ }\PYG{n+nn}{IEEE}\PYG{p}{;}
\PYG{k}{use}\PYG{+w}{ }\PYG{n+nn}{IEEE.STD\PYGZus{}LOGIC\PYGZus{}1164.}\PYG{k}{ALL}\PYG{p}{;}
\PYG{k}{use}\PYG{+w}{ }\PYG{n+nn}{IEEE.NUMERIC\PYGZus{}STD.}\PYG{k}{ALL}\PYG{p}{;}
\PYG{k}{use}\PYG{+w}{ }\PYG{n+nn}{work.DigEng.}\PYG{k}{all}\PYG{p}{;}


\PYG{k}{entity}\PYG{+w}{ }\PYG{n+nc}{SOURCE\PYGZus{}CTRL}\PYG{+w}{ }\PYG{k}{is}
\PYG{+w}{    }\PYG{c+c1}{\PYGZhy{}\PYGZhy{} Max value that the board switches can represent stored as a}
\PYG{+w}{    }\PYG{c+c1}{\PYGZhy{}\PYGZhy{} Generic.}
\PYG{+w}{    }\PYG{k}{Generic}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{switch\PYGZus{}limit}\PYG{+w}{ }\PYG{o}{:}\PYG{+w}{ }\PYG{k+kt}{natural}\PYG{+w}{ }\PYG{o}{:=}\PYG{+w}{ }\PYG{l+m+mi}{256}\PYG{p}{);}\PYG{+w}{ }
\PYG{+w}{    }\PYG{k}{Port}\PYG{+w}{ }\PYG{p}{(}\PYG{+w}{ }\PYG{n}{CLK}\PYG{+w}{ }\PYG{o}{:}\PYG{+w}{ }\PYG{k}{in}\PYG{+w}{  }\PYG{k+kt}{STD\PYGZus{}LOGIC}\PYG{p}{;}
\PYG{+w}{           }\PYG{n}{USER\PYGZus{}PB}\PYG{+w}{ }\PYG{o}{:}\PYG{+w}{ }\PYG{k}{in}\PYG{+w}{  }\PYG{k+kt}{STD\PYGZus{}LOGIC\PYGZus{}VECTOR}\PYG{+w}{ }\PYG{p}{(}\PYG{l+m+mi}{4}\PYG{+w}{ }\PYG{k}{downto}\PYG{+w}{ }\PYG{l+m+mi}{0}\PYG{p}{);}
\PYG{+w}{           }\PYG{n}{SWITCHES}\PYG{+w}{ }\PYG{o}{:}\PYG{+w}{ }\PYG{k}{in}\PYG{+w}{  }\PYG{k+kt}{STD\PYGZus{}LOGIC\PYGZus{}VECTOR}\PYG{+w}{ }\PYG{p}{(}\PYG{l+m+mi}{7}\PYG{+w}{ }\PYG{k}{downto}\PYG{+w}{ }\PYG{l+m+mi}{0}\PYG{p}{);}
\PYG{+w}{           }\PYG{n}{FIFO\PYGZus{}FULL}\PYG{+w}{ }\PYG{o}{:}\PYG{+w}{ }\PYG{k}{in}\PYG{+w}{  }\PYG{k+kt}{STD\PYGZus{}LOGIC}\PYG{p}{;}
\PYG{+w}{           }\PYG{n}{FIFO\PYGZus{}WR\PYGZus{}EN}\PYG{+w}{ }\PYG{o}{:}\PYG{+w}{ }\PYG{k}{out}\PYG{+w}{  }\PYG{k+kt}{STD\PYGZus{}LOGIC}\PYG{p}{;}
\PYG{+w}{           }\PYG{n}{TO\PYGZus{}OUTPUT}\PYG{+w}{ }\PYG{o}{:}\PYG{+w}{ }\PYG{k}{out}\PYG{+w}{  }\PYG{k+kt}{STD\PYGZus{}LOGIC}\PYG{p}{;}
\PYG{+w}{           }\PYG{n}{FROM\PYGZus{}OUTPUT}\PYG{+w}{ }\PYG{o}{:}\PYG{+w}{ }\PYG{k}{in}\PYG{+w}{  }\PYG{k+kt}{STD\PYGZus{}LOGIC}\PYG{p}{;}
\PYG{+w}{           }\PYG{n}{RST\PYGZus{}SOURCE}\PYG{+w}{ }\PYG{o}{:}\PYG{+w}{ }\PYG{k}{out}\PYG{+w}{  }\PYG{k+kt}{STD\PYGZus{}LOGIC}\PYG{p}{;}
\PYG{+w}{           }\PYG{n}{EN\PYGZus{}SOURCE}\PYG{+w}{ }\PYG{o}{:}\PYG{+w}{ }\PYG{k}{out}\PYG{+w}{  }\PYG{k+kt}{STD\PYGZus{}LOGIC}
\PYG{+w}{    }\PYG{p}{);}
\PYG{k}{end}\PYG{+w}{ }\PYG{n+nc}{SOURCE\PYGZus{}CTRL}\PYG{p}{;}

\PYG{k}{architecture}\PYG{+w}{ }\PYG{n+nc}{Behavioral}\PYG{+w}{ }\PYG{k}{of}\PYG{+w}{ }\PYG{n+nc}{SOURCE\PYGZus{}CTRL}\PYG{+w}{ }\PYG{k}{is}

\PYG{k}{signal}\PYG{+w}{ }\PYG{n}{EN}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{RST}\PYG{+w}{ }\PYG{o}{:}\PYG{+w}{ }\PYG{k+kt}{STD\PYGZus{}LOGIC}\PYG{p}{;}
\PYG{k}{type}\PYG{+w}{ }\PYG{n}{state\PYGZus{}type}\PYG{+w}{ }\PYG{k}{is}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{IDLE}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{COMP}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{HOLD}\PYG{p}{);}\PYG{+w}{  }\PYG{c+c1}{\PYGZhy{}\PYGZhy{} The FSM states}
\PYG{k}{signal}\PYG{+w}{ }\PYG{n}{state}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{next\PYGZus{}state}\PYG{o}{:}\PYG{+w}{ }\PYG{n}{state\PYGZus{}type}\PYG{p}{;}\PYG{+w}{   }\PYG{c+c1}{\PYGZhy{}\PYGZhy{} The states as signals}

\PYG{c+c1}{\PYGZhy{}\PYGZhy{} Internal signal for the board switch limit counter.}
\PYG{c+c1}{\PYGZhy{}\PYGZhy{}  This counter limits the maximum number of outputs based on}
\PYG{c+c1}{\PYGZhy{}\PYGZhy{}  the switches on the board. There are 8 switches on the board,}
\PYG{c+c1}{\PYGZhy{}\PYGZhy{}  so a maximum of 256 values can be represented.}
\PYG{k}{signal}\PYG{+w}{ }\PYG{n}{LIMT\PYGZus{}CNT\PYGZus{}OUT}\PYG{+w}{ }\PYG{o}{:}\PYG{+w}{ }\PYG{k+kt}{UNSIGNED}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{log2}\PYG{p}{(}\PYG{n}{switch\PYGZus{}limit}\PYG{p}{)}\PYG{o}{\PYGZhy{}}\PYG{l+m+mi}{1}\PYG{+w}{ }\PYG{k}{downto}\PYG{+w}{ }\PYG{l+m+mi}{0}\PYG{p}{);}
\PYG{k}{signal}\PYG{+w}{ }\PYG{n}{LIMT\PYGZus{}CNT\PYGZus{}EN}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{LIMT\PYGZus{}CNT\PYGZus{}RST}\PYG{+w}{ }\PYG{o}{:}\PYG{+w}{ }\PYG{k+kt}{STD\PYGZus{}LOGIC}\PYG{p}{;}
\PYG{c+c1}{\PYGZhy{}\PYGZhy{} To ignore any changes in the SWITCHES we need to store the value}
\PYG{c+c1}{\PYGZhy{}\PYGZhy{} of switches in an internal signal when the enablle button is}
\PYG{c+c1}{\PYGZhy{}\PYGZhy{} pressed during the IDLE state.}
\PYG{k}{signal}\PYG{+w}{ }\PYG{n}{LIMT\PYGZus{}REG\PYGZus{}EN}\PYG{+w}{ }\PYG{o}{:}\PYG{+w}{ }\PYG{k+kt}{STD\PYGZus{}LOGIC}\PYG{p}{;}
\PYG{k}{signal}\PYG{+w}{ }\PYG{n}{LIMT\PYGZus{}REG\PYGZus{}RST}\PYG{+w}{ }\PYG{o}{:}\PYG{+w}{ }\PYG{k+kt}{STD\PYGZus{}LOGIC}\PYG{p}{;}
\PYG{k}{signal}\PYG{+w}{ }\PYG{n}{LIMT\PYGZus{}REG\PYGZus{}OUT}\PYG{+w}{ }\PYG{o}{:}\PYG{+w}{ }\PYG{k+kt}{STD\PYGZus{}LOGIC\PYGZus{}VECTOR}\PYG{+w}{ }\PYG{p}{(}\PYG{l+m+mi}{7}\PYG{+w}{ }\PYG{k}{downto}\PYG{+w}{ }\PYG{l+m+mi}{0}\PYG{p}{);}

\PYG{k}{begin}

\PYG{n}{EN}\PYG{+w}{ }\PYG{o}{\PYGZlt{}=}\PYG{+w}{ }\PYG{n}{USER\PYGZus{}PB}\PYG{p}{(}\PYG{l+m+mi}{3}\PYG{p}{);}
\PYG{n}{RST}\PYG{+w}{ }\PYG{o}{\PYGZlt{}=}\PYG{+w}{ }\PYG{n}{USER\PYGZus{}PB}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{p}{);}
\PYG{n}{RST\PYGZus{}SOURCE}\PYG{+w}{ }\PYG{o}{\PYGZlt{}=}\PYG{+w}{ }\PYG{n}{RST}\PYG{p}{;}

\PYG{c+c1}{\PYGZhy{}\PYGZhy{} Port map for the value limit counter}
\PYG{n}{LIMT\PYGZus{}CNT}\PYG{+w}{ }\PYG{o}{:}\PYG{+w}{ }\PYG{k}{entity}\PYG{+w}{ }\PYG{n+nc}{work}\PYG{p}{.}\PYG{n}{parameterizable\PYGZus{}counter}\PYG{+w}{ }
\PYG{k}{GENERIC}\PYG{+w}{ }\PYG{k}{MAP}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{LIMIT}\PYG{+w}{ }\PYG{o}{=\PYGZgt{}}\PYG{+w}{ }\PYG{n}{switch\PYGZus{}limit}\PYG{p}{)}
\PYG{k}{PORT}\PYG{+w}{ }\PYG{k}{MAP}\PYG{p}{(}
\PYG{+w}{	}\PYG{n}{clk}\PYG{+w}{ }\PYG{o}{=\PYGZgt{}}\PYG{+w}{ }\PYG{n}{clk}\PYG{p}{,}
\PYG{+w}{	}\PYG{n}{rst}\PYG{+w}{ }\PYG{o}{=\PYGZgt{}}\PYG{+w}{ }\PYG{n}{LIMT\PYGZus{}CNT\PYGZus{}RST}\PYG{p}{,}
\PYG{+w}{	}\PYG{n}{enable}\PYG{+w}{ }\PYG{o}{=\PYGZgt{}}\PYG{+w}{ }\PYG{n}{LIMT\PYGZus{}CNT\PYGZus{}EN}\PYG{p}{,}
\PYG{+w}{	}\PYG{n}{count\PYGZus{}out}\PYG{+w}{ }\PYG{o}{=\PYGZgt{}}\PYG{+w}{ }\PYG{n}{LIMT\PYGZus{}CNT\PYGZus{}OUT}
\PYG{p}{);}

\PYG{c+c1}{\PYGZhy{}\PYGZhy{} A register to store the value of SWITCHES when enabled.}
\PYG{n}{switch\PYGZus{}register}\PYG{+w}{ }\PYG{o}{:}\PYG{+w}{ }\PYG{k}{process}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{clk}\PYG{p}{)}\PYG{+w}{ }\PYG{k}{is}
\PYG{k}{begin}
\PYG{+w}{    }\PYG{k}{if}\PYG{+w}{ }\PYG{n}{rising\PYGZus{}edge}\PYG{p}{(}\PYG{n}{clk}\PYG{p}{)}\PYG{+w}{ }\PYG{k}{then}
\PYG{+w}{        }\PYG{k}{if}\PYG{+w}{ }\PYG{n}{LIMT\PYGZus{}REG\PYGZus{}RST}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{l+s+sc}{\PYGZsq{}1\PYGZsq{}}\PYG{+w}{ }\PYG{k}{then}
\PYG{+w}{            }\PYG{n}{LIMT\PYGZus{}REG\PYGZus{}OUT}\PYG{+w}{ }\PYG{o}{\PYGZlt{}=}\PYG{+w}{ }\PYG{p}{(}\PYG{k}{others}\PYG{+w}{ }\PYG{o}{=\PYGZgt{}}\PYG{+w}{ }\PYG{l+s+sc}{\PYGZsq{}0\PYGZsq{}}\PYG{p}{);}
\PYG{+w}{        }\PYG{k}{elsif}\PYG{+w}{ }\PYG{n}{LIMT\PYGZus{}REG\PYGZus{}EN}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{l+s+sc}{\PYGZsq{}1\PYGZsq{}}\PYG{+w}{ }\PYG{k}{then}
\PYG{+w}{            }\PYG{n}{LIMT\PYGZus{}REG\PYGZus{}OUT}\PYG{+w}{ }\PYG{o}{\PYGZlt{}=}\PYG{+w}{ }\PYG{n}{SWITCHES}\PYG{p}{;}
\PYG{+w}{        }\PYG{k}{end}\PYG{+w}{ }\PYG{k}{if}\PYG{p}{;}
\PYG{+w}{    }\PYG{k}{end}\PYG{+w}{ }\PYG{k}{if}\PYG{p}{;}
\PYG{k}{end}\PYG{+w}{ }\PYG{k}{process}\PYG{+w}{ }\PYG{n+nc}{switch\PYGZus{}register}\PYG{p}{;}

\PYG{c+c1}{\PYGZhy{}\PYGZhy{}  Sets the state as IDLE (reset state) when the reset input is set high.}
\PYG{c+c1}{\PYGZhy{}\PYGZhy{}  At each clock cycle if the reset isn\PYGZsq{}t high, the state is set to the next}
\PYG{c+c1}{\PYGZhy{}\PYGZhy{}  state.}
\PYG{n}{state\PYGZus{}assignment}\PYG{+w}{ }\PYG{o}{:}\PYG{+w}{ }\PYG{k}{process}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{clk}\PYG{p}{)}\PYG{+w}{ }\PYG{k}{is}
\PYG{k}{begin}
\PYG{+w}{    }\PYG{k}{if}\PYG{+w}{ }\PYG{n}{rising\PYGZus{}edge}\PYG{p}{(}\PYG{n}{clk}\PYG{p}{)}\PYG{+w}{ }\PYG{k}{then}
\PYG{+w}{        }\PYG{k}{if}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{rst}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{l+s+sc}{\PYGZsq{}1\PYGZsq{}}\PYG{p}{)}\PYG{+w}{ }\PYG{k}{then}
\PYG{+w}{            }\PYG{n}{state}\PYG{+w}{ }\PYG{o}{\PYGZlt{}=}\PYG{+w}{ }\PYG{n}{IDLE}\PYG{p}{;}
\PYG{+w}{        }\PYG{k}{else}
\PYG{+w}{            }\PYG{n}{state}\PYG{+w}{ }\PYG{o}{\PYGZlt{}=}\PYG{+w}{ }\PYG{n}{next\PYGZus{}state}\PYG{p}{;}
\PYG{+w}{        }\PYG{k}{end}\PYG{+w}{ }\PYG{k}{if}\PYG{p}{;}
\PYG{+w}{    }\PYG{k}{end}\PYG{+w}{ }\PYG{k}{if}\PYG{p}{;}\PYG{+w}{ }
\PYG{k}{end}\PYG{+w}{ }\PYG{k}{process}\PYG{+w}{ }\PYG{n+nc}{state\PYGZus{}assignment}\PYG{p}{;}

\PYG{n}{fsm\PYGZus{}process}\PYG{+w}{ }\PYG{o}{:}\PYG{+w}{ }\PYG{k}{process}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{state}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{en}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{rst}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{LIMT\PYGZus{}CNT\PYGZus{}OUT}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{FIFO\PYGZus{}FULL}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{FROM\PYGZus{}OUTPUT}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{LIMT\PYGZus{}REG\PYGZus{}OUT}\PYG{p}{)}
\PYG{k}{begin}
\PYG{+w}{    }\PYG{k}{case}\PYG{+w}{ }\PYG{n}{state}\PYG{+w}{ }\PYG{k}{is}
\PYG{+w}{        }\PYG{k}{when}\PYG{+w}{ }\PYG{n}{IDLE}\PYG{+w}{ }\PYG{o}{=\PYGZgt{}}
\PYG{+w}{            }\PYG{c+c1}{\PYGZhy{}\PYGZhy{} Start computing values as soon as the enable button is pressed and}
\PYG{+w}{            }\PYG{c+c1}{\PYGZhy{}\PYGZhy{} the output has finished displaying.}
\PYG{+w}{            }\PYG{k}{if}\PYG{+w}{ }\PYG{n}{en}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{l+s+sc}{\PYGZsq{}1\PYGZsq{}}\PYG{+w}{ }\PYG{k}{and}\PYG{+w}{ }\PYG{n}{FROM\PYGZus{}OUTPUT}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{l+s+sc}{\PYGZsq{}0\PYGZsq{}}\PYG{+w}{ }\PYG{k}{then}
\PYG{+w}{                }\PYG{n}{next\PYGZus{}state}\PYG{+w}{ }\PYG{o}{\PYGZlt{}=}\PYG{+w}{ }\PYG{n}{COMP}\PYG{p}{;}
\PYG{+w}{            }\PYG{k}{else}\PYG{+w}{ }
\PYG{+w}{                }\PYG{n}{next\PYGZus{}state}\PYG{+w}{ }\PYG{o}{\PYGZlt{}=}\PYG{+w}{ }\PYG{n}{state}\PYG{p}{;}
\PYG{+w}{            }\PYG{k}{end}\PYG{+w}{ }\PYG{k}{if}\PYG{p}{;}
\PYG{+w}{        }\PYG{k}{when}\PYG{+w}{ }\PYG{n}{COMP}\PYG{+w}{ }\PYG{o}{=\PYGZgt{}}
\PYG{+w}{            }\PYG{c+c1}{\PYGZhy{}\PYGZhy{} When the FIFO is full, we want to wait until the OUTPUT logic}
\PYG{+w}{            }\PYG{c+c1}{\PYGZhy{}\PYGZhy{} pops some values and frees some space.}
\PYG{+w}{            }\PYG{k}{if}\PYG{+w}{ }\PYG{n}{FIFO\PYGZus{}FULL}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{l+s+sc}{\PYGZsq{}1\PYGZsq{}}\PYG{+w}{ }\PYG{k}{then}
\PYG{+w}{                }\PYG{n}{next\PYGZus{}state}\PYG{+w}{ }\PYG{o}{\PYGZlt{}=}\PYG{+w}{ }\PYG{n}{HOLD}\PYG{p}{;}
\PYG{+w}{            }\PYG{c+c1}{\PYGZhy{}\PYGZhy{} As soon as the limit set by the switches have been reached, the}
\PYG{+w}{            }\PYG{c+c1}{\PYGZhy{}\PYGZhy{} logic should stop.}
\PYG{+w}{            }\PYG{k}{elsif}\PYG{+w}{ }\PYG{n}{LIMT\PYGZus{}CNT\PYGZus{}OUT}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{to\PYGZus{}integer}\PYG{p}{(}\PYG{k+kt}{unsigned}\PYG{p}{(}\PYG{n}{LIMT\PYGZus{}REG\PYGZus{}OUT}\PYG{p}{))}\PYG{o}{\PYGZhy{}}\PYG{l+m+mi}{1}\PYG{+w}{ }\PYG{k}{then}
\PYG{+w}{                }\PYG{n}{next\PYGZus{}state}\PYG{+w}{ }\PYG{o}{\PYGZlt{}=}\PYG{+w}{ }\PYG{n}{IDLE}\PYG{p}{;}
\PYG{+w}{            }\PYG{k}{else}\PYG{+w}{ }
\PYG{+w}{                }\PYG{n}{next\PYGZus{}state}\PYG{+w}{ }\PYG{o}{\PYGZlt{}=}\PYG{+w}{ }\PYG{n}{state}\PYG{p}{;}
\PYG{+w}{            }\PYG{k}{end}\PYG{+w}{ }\PYG{k}{if}\PYG{p}{;}
\PYG{+w}{        }\PYG{k}{when}\PYG{+w}{ }\PYG{n}{HOLD}\PYG{+w}{ }\PYG{o}{=\PYGZgt{}}
\PYG{+w}{            }\PYG{c+c1}{\PYGZhy{}\PYGZhy{} In this state, we wait until the OUTPUT logic pops values and}
\PYG{+w}{            }\PYG{c+c1}{\PYGZhy{}\PYGZhy{} frees up some space from the FIFO. Once the FIFO is no longer full,}
\PYG{+w}{            }\PYG{c+c1}{\PYGZhy{}\PYGZhy{} more values can be computed until the switch limit is reached.}
\PYG{+w}{            }\PYG{k}{if}\PYG{+w}{ }\PYG{n}{FIFO\PYGZus{}FULL}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{l+s+sc}{\PYGZsq{}0\PYGZsq{}}\PYG{+w}{ }\PYG{k}{then}
\PYG{+w}{                }\PYG{n}{next\PYGZus{}state}\PYG{+w}{ }\PYG{o}{\PYGZlt{}=}\PYG{+w}{ }\PYG{n}{COMP}\PYG{p}{;}
\PYG{+w}{            }\PYG{k}{else}\PYG{+w}{ }
\PYG{+w}{                }\PYG{n}{next\PYGZus{}state}\PYG{+w}{ }\PYG{o}{\PYGZlt{}=}\PYG{+w}{ }\PYG{n}{state}\PYG{p}{;}
\PYG{+w}{            }\PYG{k}{end}\PYG{+w}{ }\PYG{k}{if}\PYG{p}{;}
\PYG{+w}{    }\PYG{k}{end}\PYG{+w}{ }\PYG{k}{case}\PYG{p}{;}
\PYG{k}{end}\PYG{+w}{ }\PYG{k}{process}\PYG{+w}{ }\PYG{n+nc}{fsm\PYGZus{}process}\PYG{p}{;}

\PYG{c+c1}{\PYGZhy{}\PYGZhy{} We want to reset the max value counter to 0 only in IDLE state.}
\PYG{n}{LIMT\PYGZus{}CNT\PYGZus{}RST}\PYG{+w}{ }\PYG{o}{\PYGZlt{}=}\PYG{+w}{ }\PYG{l+s+sc}{\PYGZsq{}1\PYGZsq{}}\PYG{+w}{ }\PYG{k}{when}\PYG{+w}{ }\PYG{n}{state}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{IDLE}\PYG{+w}{ }\PYG{k}{else}
\PYG{+w}{                }\PYG{l+s+sc}{\PYGZsq{}0\PYGZsq{}}\PYG{p}{;}
\PYG{c+c1}{\PYGZhy{}\PYGZhy{} The counter should only increment when in COMP state so it can}
\PYG{c+c1}{\PYGZhy{}\PYGZhy{} synchronise with the next outputs being generated. FIFO must not}
\PYG{c+c1}{\PYGZhy{}\PYGZhy{} full as well.}
\PYG{n}{LIMT\PYGZus{}CNT\PYGZus{}EN}\PYG{+w}{ }\PYG{o}{\PYGZlt{}=}\PYG{+w}{ }\PYG{l+s+sc}{\PYGZsq{}1\PYGZsq{}}\PYG{+w}{ }\PYG{k}{when}\PYG{+w}{ }\PYG{n}{state}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{COMP}\PYG{+w}{ }\PYG{k}{and}\PYG{+w}{ }\PYG{n}{FIFO\PYGZus{}FULL}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{l+s+sc}{\PYGZsq{}0\PYGZsq{}}\PYG{+w}{ }\PYG{k}{else}
\PYG{+w}{               }\PYG{l+s+sc}{\PYGZsq{}0\PYGZsq{}}\PYG{p}{;}
\PYG{c+c1}{\PYGZhy{}\PYGZhy{} The source is enabled and generates the next value only when in}
\PYG{c+c1}{\PYGZhy{}\PYGZhy{} the compute state (COMP) and when the FIFO is not full. We need}
\PYG{c+c1}{\PYGZhy{}\PYGZhy{} the source to be enabled as soon as the enable button is clicked}
\PYG{c+c1}{\PYGZhy{}\PYGZhy{} during the IDLE state so that the first value can be computed}
\PYG{c+c1}{\PYGZhy{}\PYGZhy{} as soon as FIFO write is enabled.}
\PYG{n}{EN\PYGZus{}SOURCE}\PYG{+w}{ }\PYG{o}{\PYGZlt{}=}\PYG{+w}{ }\PYG{l+s+sc}{\PYGZsq{}1\PYGZsq{}}\PYG{+w}{ }\PYG{k}{when}\PYG{+w}{ }\PYG{n}{state}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{COMP}\PYG{+w}{ }\PYG{k}{and}\PYG{+w}{ }\PYG{n}{FIFO\PYGZus{}FULL}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{l+s+sc}{\PYGZsq{}0\PYGZsq{}}\PYG{+w}{ }\PYG{k}{else}
\PYG{+w}{             }\PYG{l+s+sc}{\PYGZsq{}1\PYGZsq{}}\PYG{+w}{ }\PYG{k}{when}\PYG{+w}{ }\PYG{n}{state}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{IDLE}\PYG{+w}{ }\PYG{k}{and}\PYG{+w}{ }\PYG{n}{en}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{l+s+sc}{\PYGZsq{}1\PYGZsq{}}\PYG{+w}{ }\PYG{k}{and}\PYG{+w}{ }\PYG{n}{FROM\PYGZus{}OUTPUT}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{l+s+sc}{\PYGZsq{}0\PYGZsq{}}\PYG{+w}{ }\PYG{k}{else}
\PYG{+w}{             }\PYG{l+s+sc}{\PYGZsq{}0\PYGZsq{}}\PYG{p}{;}
\PYG{c+c1}{\PYGZhy{}\PYGZhy{} FIFO write needs to be enabled in the COMP state so that the}
\PYG{c+c1}{\PYGZhy{}\PYGZhy{} newly computed values are stored, FIFO should not be full.}
\PYG{n}{FIFO\PYGZus{}WR\PYGZus{}EN}\PYG{+w}{ }\PYG{o}{\PYGZlt{}=}\PYG{+w}{ }\PYG{l+s+sc}{\PYGZsq{}1\PYGZsq{}}\PYG{+w}{ }\PYG{k}{when}\PYG{+w}{ }\PYG{n}{state}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{COMP}\PYG{+w}{ }\PYG{k}{and}\PYG{+w}{ }\PYG{n}{FIFO\PYGZus{}FULL}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{l+s+sc}{\PYGZsq{}0\PYGZsq{}}\PYG{+w}{ }\PYG{k}{else}
\PYG{+w}{              }\PYG{l+s+sc}{\PYGZsq{}0\PYGZsq{}}\PYG{p}{;}
\PYG{c+c1}{\PYGZhy{}\PYGZhy{} We store the value of SWITCHES when the state is IDLE and when the}
\PYG{c+c1}{\PYGZhy{}\PYGZhy{} user enables the logic, this way the logic will not change when the}
\PYG{c+c1}{\PYGZhy{}\PYGZhy{} SWITCH values are changed during operation.}
\PYG{n}{LIMT\PYGZus{}REG\PYGZus{}EN}\PYG{+w}{ }\PYG{o}{\PYGZlt{}=}\PYG{+w}{ }\PYG{l+s+sc}{\PYGZsq{}1\PYGZsq{}}\PYG{+w}{ }\PYG{k}{when}\PYG{+w}{ }\PYG{n}{state}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{IDLE}\PYG{+w}{ }\PYG{k}{and}\PYG{+w}{ }\PYG{n}{en}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{l+s+sc}{\PYGZsq{}1\PYGZsq{}}\PYG{+w}{ }\PYG{k}{else}
\PYG{+w}{               }\PYG{l+s+sc}{\PYGZsq{}0\PYGZsq{}}\PYG{p}{;}
\PYG{n}{LIMT\PYGZus{}REG\PYGZus{}RST}\PYG{+w}{ }\PYG{o}{\PYGZlt{}=}\PYG{+w}{ }\PYG{l+s+sc}{\PYGZsq{}1\PYGZsq{}}\PYG{+w}{ }\PYG{k}{when}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{state}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{IDLE}\PYG{+w}{ }\PYG{k}{and}\PYG{+w}{ }\PYG{n}{en}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{l+s+sc}{\PYGZsq{}0\PYGZsq{}}\PYG{p}{)}\PYG{+w}{ }\PYG{k}{or}\PYG{+w}{ }\PYG{n}{RST}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{l+s+sc}{\PYGZsq{}1\PYGZsq{}}\PYG{+w}{ }\PYG{k}{else}
\PYG{+w}{                }\PYG{l+s+sc}{\PYGZsq{}0\PYGZsq{}}\PYG{p}{;}

\PYG{k}{end}\PYG{+w}{ }\PYG{n+nc}{Behavioral}\PYG{p}{;}

\end{Verbatim}
