\begin{Verbatim}[commandchars=\\\{\}]
\PYG{k}{library}\PYG{+w}{ }\PYG{n+nn}{IEEE}\PYG{p}{;}
\PYG{k}{use}\PYG{+w}{ }\PYG{n+nn}{IEEE.STD\PYGZus{}LOGIC\PYGZus{}1164.}\PYG{k}{ALL}\PYG{p}{;}
\PYG{k}{use}\PYG{+w}{ }\PYG{n+nn}{IEEE.NUMERIC\PYGZus{}STD.}\PYG{k}{ALL}\PYG{p}{;}

\PYG{k}{entity}\PYG{+w}{ }\PYG{n+nc}{fibonacci\PYGZus{}8bit\PYGZus{}sequence}\PYG{+w}{ }\PYG{k}{is}
\PYG{+w}{    }\PYG{c+c1}{\PYGZhy{}\PYGZhy{} Adjustable value for the \PYGZsh{} of clock cycles the debouncer counts for.}
\PYG{+w}{    }\PYG{c+c1}{\PYGZhy{}\PYGZhy{} Default set to 50x10\PYGZca{}6 for a debounce of approx. 0.5 seconds for a}
\PYG{+w}{    }\PYG{c+c1}{\PYGZhy{}\PYGZhy{} 100MHz processor.}
\PYG{+w}{    }\PYG{k}{generic}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{LIMIT}\PYG{+w}{ }\PYG{o}{:}\PYG{+w}{ }\PYG{k+kt}{NATURAL}\PYG{+w}{ }\PYG{o}{:=}\PYG{+w}{ }\PYG{l+m+mi}{50000000}\PYG{p}{);}
\PYG{+w}{    }\PYG{k}{Port}\PYG{+w}{ }\PYG{p}{(}\PYG{+w}{ }\PYG{n}{clk}\PYG{+w}{ }\PYG{o}{:}\PYG{+w}{ }\PYG{k}{in}\PYG{+w}{ }\PYG{k+kt}{STD\PYGZus{}LOGIC}\PYG{p}{;}
\PYG{+w}{           }\PYG{c+c1}{\PYGZhy{}\PYGZhy{}  Count raw user input, translates to \PYGZsq{}enable\PYGZsq{} signal close to the counter}
\PYG{+w}{           }\PYG{n}{count}\PYG{+w}{ }\PYG{o}{:}\PYG{+w}{ }\PYG{k}{in}\PYG{+w}{ }\PYG{k+kt}{STD\PYGZus{}LOGIC}\PYG{p}{;}
\PYG{+w}{           }\PYG{c+c1}{\PYGZhy{}\PYGZhy{}  Raw user input that when presses will reset the sequence}
\PYG{+w}{           }\PYG{n}{reset}\PYG{+w}{ }\PYG{o}{:}\PYG{+w}{ }\PYG{k}{in}\PYG{+w}{ }\PYG{k+kt}{STD\PYGZus{}LOGIC}\PYG{p}{;}
\PYG{+w}{           }\PYG{c+c1}{\PYGZhy{}\PYGZhy{}  Fibonacci output that is read from ROM}
\PYG{+w}{           }\PYG{n}{output}\PYG{+w}{ }\PYG{o}{:}\PYG{+w}{ }\PYG{k}{out}\PYG{+w}{ }\PYG{k+kt}{STD\PYGZus{}LOGIC\PYGZus{}VECTOR}\PYG{+w}{ }\PYG{p}{(}\PYG{l+m+mi}{7}\PYG{+w}{ }\PYG{k}{downto}\PYG{+w}{ }\PYG{l+m+mi}{0}\PYG{p}{));}
\PYG{k}{end}\PYG{+w}{ }\PYG{n+nc}{fibonacci\PYGZus{}8bit\PYGZus{}sequence}\PYG{p}{;}

\PYG{k}{architecture}\PYG{+w}{ }\PYG{n+nc}{Behavioral}\PYG{+w}{ }\PYG{k}{of}\PYG{+w}{ }\PYG{n+nc}{fibonacci\PYGZus{}8bit\PYGZus{}sequence}\PYG{+w}{ }\PYG{k}{is}

\PYG{c+c1}{\PYGZhy{}\PYGZhy{} Internal signals containing the debounced signals for the raw user inputs}
\PYG{k}{signal}\PYG{+w}{ }\PYG{n}{reset\PYGZus{}debounced}\PYG{+w}{ }\PYG{o}{:}\PYG{+w}{ }\PYG{k+kt}{STD\PYGZus{}LOGIC}\PYG{p}{;}
\PYG{k}{signal}\PYG{+w}{ }\PYG{n}{enable\PYGZus{}debounced}\PYG{+w}{ }\PYG{o}{:}\PYG{+w}{ }\PYG{k+kt}{STD\PYGZus{}LOGIC}\PYG{p}{;}

\PYG{c+c1}{\PYGZhy{}\PYGZhy{} Internal signal containing the output of the counter}
\PYG{c+c1}{\PYGZhy{}\PYGZhy{} This output points to a specific location in ROM}
\PYG{k}{signal}\PYG{+w}{ }\PYG{n}{counter\PYGZus{}output\PYGZus{}address}\PYG{+w}{ }\PYG{o}{:}\PYG{+w}{ }\PYG{k+kt}{UNSIGNED}\PYG{+w}{ }\PYG{p}{(}\PYG{l+m+mi}{3}\PYG{+w}{ }\PYG{k}{downto}\PYG{+w}{ }\PYG{l+m+mi}{0}\PYG{p}{);}

\PYG{k}{begin}
\PYG{+w}{    }\PYG{c+c1}{\PYGZhy{}\PYGZhy{}  This debouncer is used to debounce the count button input.}
\PYG{+w}{    }\PYG{c+c1}{\PYGZhy{}\PYGZhy{}  When the user clicks the count button, it is debounced and}
\PYG{+w}{    }\PYG{c+c1}{\PYGZhy{}\PYGZhy{}  inputted into the counter as enable.}
\PYG{+w}{    }\PYG{n}{enable\PYGZus{}input\PYGZus{}debouncer}\PYG{+w}{ }\PYG{o}{:}\PYG{+w}{ }\PYG{k}{entity}\PYG{+w}{ }\PYG{n+nc}{work}\PYG{p}{.}\PYG{n}{efficient\PYGZus{}debouncer}
\PYG{+w}{    }\PYG{k}{generic}\PYG{+w}{ }\PYG{k}{map}\PYG{+w}{ }\PYG{p}{(}
\PYG{+w}{        }\PYG{n}{LIMIT}\PYG{+w}{ }\PYG{o}{=\PYGZgt{}}\PYG{+w}{ }\PYG{n}{LIMIT}
\PYG{+w}{    }\PYG{p}{)}
\PYG{+w}{    }
\PYG{+w}{    }
\PYG{+w}{    }
\PYG{+w}{    }
\PYG{+w}{    }
\PYG{+w}{    }\PYG{k}{port}\PYG{+w}{ }\PYG{k}{map}\PYG{+w}{ }\PYG{p}{(}
\PYG{+w}{        }\PYG{n}{clk}\PYG{+w}{ }\PYG{o}{=\PYGZgt{}}\PYG{+w}{ }\PYG{n}{clk}\PYG{p}{,}
\PYG{+w}{        }\PYG{c+c1}{\PYGZhy{}\PYGZhy{}  Raw signal is inputted}
\PYG{+w}{        }\PYG{n}{input\PYGZus{}raw}\PYG{+w}{ }\PYG{o}{=\PYGZgt{}}\PYG{+w}{ }\PYG{n}{count}\PYG{p}{,}
\PYG{+w}{        }\PYG{c+c1}{\PYGZhy{}\PYGZhy{}  Debounced signal outputted}
\PYG{+w}{        }\PYG{n}{output\PYGZus{}debounced}\PYG{+w}{ }\PYG{o}{=\PYGZgt{}}\PYG{+w}{ }\PYG{n}{enable\PYGZus{}debounced}
\PYG{+w}{    }\PYG{p}{);}
\PYG{+w}{    }
\PYG{+w}{    }
\PYG{+w}{    }\PYG{c+c1}{\PYGZhy{}\PYGZhy{}  This debouncer is used to debounce the reset button input.}
\PYG{+w}{    }\PYG{c+c1}{\PYGZhy{}\PYGZhy{}  When the user clicks the reset button, it is debounced and}
\PYG{+w}{    }\PYG{c+c1}{\PYGZhy{}\PYGZhy{}  inputted to the counter as reset.}
\PYG{+w}{    }\PYG{n}{reset\PYGZus{}input\PYGZus{}debouncer}\PYG{+w}{ }\PYG{o}{:}\PYG{+w}{ }\PYG{k}{entity}\PYG{+w}{ }\PYG{n+nc}{work}\PYG{p}{.}\PYG{n}{efficient\PYGZus{}debouncer}
\PYG{+w}{    }\PYG{k}{generic}\PYG{+w}{ }\PYG{k}{map}\PYG{+w}{ }\PYG{p}{(}
\PYG{+w}{        }\PYG{n}{LIMIT}\PYG{+w}{ }\PYG{o}{=\PYGZgt{}}\PYG{+w}{ }\PYG{n}{LIMIT}
\PYG{+w}{    }\PYG{p}{)}
\PYG{+w}{    }\PYG{k}{port}\PYG{+w}{ }\PYG{k}{map}\PYG{+w}{ }\PYG{p}{(}
\PYG{+w}{        }\PYG{n}{clk}\PYG{+w}{ }\PYG{o}{=\PYGZgt{}}\PYG{+w}{ }\PYG{n}{clk}\PYG{p}{,}
\PYG{+w}{        }\PYG{c+c1}{\PYGZhy{}\PYGZhy{}  Raw user input is inputted}
\PYG{+w}{        }\PYG{n}{input\PYGZus{}raw}\PYG{+w}{ }\PYG{o}{=\PYGZgt{}}\PYG{+w}{ }\PYG{n}{reset}\PYG{p}{,}
\PYG{+w}{        }\PYG{c+c1}{\PYGZhy{}\PYGZhy{}  DEbounced signal is outputted}
\PYG{+w}{        }\PYG{n}{output\PYGZus{}debounced}\PYG{+w}{ }\PYG{o}{=\PYGZgt{}}\PYG{+w}{ }\PYG{n}{reset\PYGZus{}debounced}
\PYG{+w}{    }\PYG{p}{);}


\PYG{+w}{    }\PYG{c+c1}{\PYGZhy{}\PYGZhy{}  The debounced reset and count signals are inputted as reset and count.}
\PYG{+w}{    }\PYG{c+c1}{\PYGZhy{}\PYGZhy{}  When count is pressed, the debounced signal comes in as enable and enables}
\PYG{+w}{    }\PYG{c+c1}{\PYGZhy{}\PYGZhy{}  the counter allowing it to increment. When the debounced reset is inputted,}
\PYG{+w}{    }\PYG{c+c1}{\PYGZhy{}\PYGZhy{}  the counter resets back to zero.}
\PYG{+w}{    }\PYG{n}{sync\PYGZus{}enable\PYGZus{}4bit\PYGZus{}counter}\PYG{+w}{ }\PYG{o}{:}\PYG{+w}{ }\PYG{k}{entity}\PYG{+w}{ }\PYG{n+nc}{work}\PYG{p}{.}\PYG{n}{sync\PYGZus{}enable\PYGZus{}4bit\PYGZus{}counter}\PYG{+w}{ }
\PYG{+w}{    }\PYG{k}{port}\PYG{+w}{ }\PYG{k}{map}\PYG{+w}{ }\PYG{p}{(}
\PYG{+w}{        }\PYG{n}{clk}\PYG{+w}{ }\PYG{o}{=\PYGZgt{}}\PYG{+w}{ }\PYG{n}{clk}\PYG{p}{,}
\PYG{+w}{        }\PYG{c+c1}{\PYGZhy{}\PYGZhy{}  The debounced signals are inputted (not raw user inputs)}
\PYG{+w}{        }\PYG{n}{rst}\PYG{+w}{ }\PYG{o}{=\PYGZgt{}}\PYG{+w}{ }\PYG{n}{reset\PYGZus{}debounced}\PYG{p}{,}
\PYG{+w}{        }\PYG{n}{en}\PYG{+w}{ }\PYG{o}{=\PYGZgt{}}\PYG{+w}{ }\PYG{n}{enable\PYGZus{}debounced}\PYG{p}{,}
\PYG{+w}{        }\PYG{c+c1}{\PYGZhy{}\PYGZhy{}  The output is mapped to the counter address internal signal}
\PYG{+w}{        }\PYG{n}{cnt\PYGZus{}out}\PYG{+w}{ }\PYG{o}{=\PYGZgt{}}\PYG{+w}{ }\PYG{n}{counter\PYGZus{}output\PYGZus{}address}
\PYG{+w}{    }\PYG{p}{);}
\PYG{+w}{    }
\PYG{+w}{    }\PYG{c+c1}{\PYGZhy{}\PYGZhy{}  The ROM stores the first 14 elements of the Fibonacci sequence.}
\PYG{+w}{    }\PYG{c+c1}{\PYGZhy{}\PYGZhy{}  The output from the counter is inputted as the address into the ROM,}
\PYG{+w}{    }\PYG{c+c1}{\PYGZhy{}\PYGZhy{}  the data at that address is then outputted by the ROM into the output bus.}
\PYG{+w}{    }\PYG{n}{fibonacci\PYGZus{}8bit\PYGZus{}sync\PYGZus{}read\PYGZus{}rom}\PYG{+w}{ }\PYG{o}{:}\PYG{+w}{ }\PYG{k}{entity}\PYG{+w}{ }\PYG{n+nc}{work}\PYG{p}{.}\PYG{n}{fibonacci\PYGZus{}8bit\PYGZus{}async\PYGZus{}read\PYGZus{}rom}
\PYG{+w}{    }\PYG{k}{port}\PYG{+w}{ }\PYG{k}{map}\PYG{+w}{ }\PYG{p}{(}
\PYG{+w}{        }\PYG{c+c1}{\PYGZhy{}\PYGZhy{}  Output of 4\PYGZhy{}bit counter is used to access memory item}
\PYG{+w}{        }\PYG{n}{address}\PYG{+w}{ }\PYG{o}{=\PYGZgt{}}\PYG{+w}{ }\PYG{n}{counter\PYGZus{}output\PYGZus{}address}\PYG{p}{,}
\PYG{+w}{        }\PYG{c+c1}{\PYGZhy{}\PYGZhy{}  Memory item is outputted into DataOut bus (8\PYGZhy{}bit Fibonacci sequence)}
\PYG{+w}{        }\PYG{n}{DataOut}\PYG{+w}{ }\PYG{o}{=\PYGZgt{}}\PYG{+w}{ }\PYG{n}{output}
\PYG{+w}{    }\PYG{p}{);}

\PYG{k}{end}\PYG{+w}{ }\PYG{n+nc}{Behavioral}\PYG{p}{;}
\end{Verbatim}
